import { readdirSync, statSync, existsSync, unlinkSync } from 'fs';
import { join, extname, basename } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const imgDir = join(__dirname, '../public/img');

// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const imageExtensions = ['.png', '.jpg', '.jpeg'];

// –§–∞–π–ª—ã-–∏—Å–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ —É–¥–∞–ª—è—Ç—å)
const excludePatterns = [
  'logo', 'Logo', 'LOGO',
  'svg.svg'
];

let totalDeleted = 0;
let totalSpaceFreed = 0;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª
 */
function shouldExclude(filename) {
  return excludePatterns.some(pattern => filename.includes(pattern));
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —É–¥–∞–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
 */
function cleanupDirectory(dirPath) {
  const items = readdirSync(dirPath);

  for (const item of items) {
    const fullPath = join(dirPath, item);
    const stat = statSync(fullPath);

    if (stat.isDirectory()) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      cleanupDirectory(fullPath);
    } else if (stat.isFile()) {
      const ext = extname(item).toLowerCase();
      const baseName = basename(item, ext);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å
      if (imageExtensions.includes(ext) && !shouldExclude(item)) {
        const webpPath = join(dirPath, `${baseName}.webp`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π WebP —Ñ–∞–π–ª
        if (existsSync(webpPath)) {
          const fileSize = stat.size;
          
          try {
            unlinkSync(fullPath);
            
            totalDeleted++;
            totalSpaceFreed += fileSize;
            
            console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ: ${item} (${(fileSize / 1024).toFixed(1)}KB)`);
            
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${item}:`, error.message);
          }
        } else {
          console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç WebP): ${item}`);
        }
      }
    }
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
  console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${imgDir}\n`);
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç WebP –≤–µ—Ä—Å–∏—è!\n');
  
  try {
    cleanupDirectory(imgDir);
    
    console.log('\n' + '='.repeat(60));
    console.log(`‚ú® –ì–æ—Ç–æ–≤–æ!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalDeleted}`);
    console.log(`   - –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: ${(totalSpaceFreed / 1024 / 1024).toFixed(2)} MB`);
    console.log('='.repeat(60));
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();


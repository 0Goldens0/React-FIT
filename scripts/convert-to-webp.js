import sharp from 'sharp';
import { readdirSync, statSync, existsSync } from 'fs';
import { join, extname, basename } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const imgDir = join(__dirname, '../public/img');

// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
const imageExtensions = ['.png', '.jpg', '.jpeg'];

// –§–∞–π–ª—ã-–∏—Å–∫–ª—é—á–µ–Ω–∏—è (–ª–æ–≥–æ—Ç–∏–ø—ã –∏ SVG)
const excludePatterns = [
  'logo', 'Logo', 'LOGO',
  'svg.svg'
];

let totalConverted = 0;
let totalSaved = 0;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª
 */
function shouldExclude(filename) {
  return excludePatterns.some(pattern => filename.includes(pattern));
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function convertDirectory(dirPath) {
  const items = readdirSync(dirPath);

  for (const item of items) {
    const fullPath = join(dirPath, item);
    const stat = statSync(fullPath);

    if (stat.isDirectory()) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      await convertDirectory(fullPath);
    } else if (stat.isFile()) {
      const ext = extname(item).toLowerCase();
      const baseName = basename(item, ext);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
      if (imageExtensions.includes(ext) && !shouldExclude(item)) {
        const webpPath = join(dirPath, `${baseName}.webp`);
        
        // –ï—Å–ª–∏ webp —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (existsSync(webpPath)) {
          console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): ${item}`);
          continue;
        }

        try {
          const originalSize = stat.size;
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 85
          await sharp(fullPath)
            .webp({ quality: 85 })
            .toFile(webpPath);
          
          const webpStat = statSync(webpPath);
          const webpSize = webpStat.size;
          const savedBytes = originalSize - webpSize;
          const savedPercent = ((savedBytes / originalSize) * 100).toFixed(1);
          
          totalConverted++;
          totalSaved += savedBytes;
          
          console.log(`‚úÖ ${item} ‚Üí ${baseName}.webp`);
          console.log(`   –†–∞–∑–º–µ—Ä: ${(originalSize / 1024).toFixed(1)}KB ‚Üí ${(webpSize / 1024).toFixed(1)}KB (—ç–∫–æ–Ω–æ–º–∏—è ${savedPercent}%)`);
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${item}:`, error.message);
        }
      }
    }
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üñºÔ∏è  –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ WebP...\n');
  console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${imgDir}\n`);
  
  try {
    await convertDirectory(imgDir);
    
    console.log('\n' + '='.repeat(60));
    console.log(`‚ú® –ì–æ—Ç–æ–≤–æ!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalConverted}`);
    console.log(`   - –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${(totalSaved / 1024 / 1024).toFixed(2)} MB`);
    console.log('='.repeat(60));
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();


// üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12 ‚Üí Console)

console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–ò');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

// 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —ç–∫—Ä–∞–Ω–µ
console.log('üìê –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –≠–ö–†–ê–ù–ï:');
console.log('   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ viewport:', window.innerWidth, 'x', window.innerHeight);
console.log('   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞:', screen.width, 'x', screen.height);
console.log('   Device Pixel Ratio:', window.devicePixelRatio);
console.log('   –ú–∞—Å—à—Ç–∞–± –±—Ä–∞—É–∑–µ—Ä–∞:', Math.round(window.devicePixelRatio * 100) + '%');
console.log('   User Agent:', navigator.userAgent);
console.log('');

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π
console.log('üé® –ë–ê–ó–û–í–´–ï –°–¢–ò–õ–ò:');
const html = document.documentElement;
const htmlStyles = window.getComputedStyle(html);
console.log('   HTML font-size:', htmlStyles.fontSize);
console.log('   HTML font-size –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: 16px');
if (htmlStyles.fontSize !== '16px') {
    console.warn('   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: font-size –Ω–µ 16px!');
}
console.log('');

// 3. –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê SERVICES (–æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞)
console.log('üíº SERVICES –°–ï–ö–¶–ò–Ø (–ö–†–ò–¢–ò–ß–ù–û!):');
const servicesSection = document.querySelector('.services-new');
const servicesGrid = document.querySelector('.services-grid-3d');

if (servicesGrid) {
    const styles = window.getComputedStyle(servicesGrid);
    const parentStyles = servicesSection ? window.getComputedStyle(servicesSection) : null;
    
    console.log('   ‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω');
    console.log('   Max-width (computed):', styles.maxWidth);
    console.log('   Max-width (inline):', servicesGrid.style.maxWidth || '(–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)');
    console.log('   Width (computed):', styles.width);
    console.log('   Actual width:', servicesGrid.offsetWidth + 'px');
    console.log('   Margin:', styles.margin);
    console.log('   Margin-left:', styles.marginLeft);
    console.log('   Margin-right:', styles.marginRight);
    console.log('   Padding:', styles.padding);
    console.log('   Gap:', styles.gap);
    console.log('   Grid columns:', styles.gridTemplateColumns);
    console.log('   Display:', styles.display);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
    if (parentStyles) {
        console.log('   ‚îî‚îÄ –†–æ–¥–∏—Ç–µ–ª—å (.services-new):');
        console.log('      Width:', parentStyles.width);
        console.log('      Max-width:', parentStyles.maxWidth);
        console.log('      Padding:', parentStyles.padding);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    const cards = servicesGrid.querySelectorAll('.service-3d-card');
    console.log('   ‚îî‚îÄ –ö–∞—Ä—Ç–æ—á–∫–∏:');
    console.log('      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', cards.length);
    if (cards.length > 0) {
        cards.forEach((card, index) => {
            const cardStyles = window.getComputedStyle(card);
            console.log(`      –ö–∞—Ä—Ç–æ—á–∫–∞ ${index + 1}:`);
            console.log(`         Width: ${card.offsetWidth}px`);
            console.log(`         Computed width: ${cardStyles.width}`);
            console.log(`         Flex-basis: ${cardStyles.flexBasis}`);
            console.log(`         Flex-grow: ${cardStyles.flexGrow}`);
            console.log(`         Min-width: ${cardStyles.minWidth}`);
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('   ‚îî‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤:');
    const mediaQueries = window.matchMedia('(max-width: 1600px)');
    console.log('      (max-width: 1600px):', mediaQueries.matches ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω');
    const mq1399 = window.matchMedia('(max-width: 1399px)');
    console.log('      (max-width: 1399px):', mq1399.matches ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω');
    const mq1200 = window.matchMedia('(max-width: 1200px)');
    console.log('      (max-width: 1200px):', mq1200.matches ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω');
    
    // –ü—Ä–æ–±–ª–µ–º—ã?
    const maxWidth = parseFloat(styles.maxWidth);
    const actualWidth = servicesGrid.offsetWidth;
    
    if (isNaN(maxWidth) || maxWidth === 0) {
        console.error('   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: max-width –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    } else if (actualWidth > maxWidth) {
        console.error(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: actual width (${actualWidth}px) > max-width (${maxWidth}px)`);
    } else {
        console.log('   ‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ: actual width <= max-width');
    }
} else {
    console.error('   ‚ùå –≠–ª–µ–º–µ–Ω—Ç .services-grid-3d –Ω–µ –Ω–∞–π–¥–µ–Ω!');
}
console.log('');

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
console.log('üìã –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–ï–ö–¶–ò–ô:');
const sections = [
    { name: 'Hero', selector: '.hero-wrapper' },
    { name: 'About', selector: '.about .content-grid' },
    { name: 'Services', selector: '.services-grid-3d' },
    { name: 'Timeline', selector: '.timeline-section .container' },
    { name: 'Contact', selector: '.form-container' },
    { name: 'Map', selector: '.russia-map-container' },
    { name: 'Stats', selector: '.stats-grid' },
    { name: 'Footer', selector: '.footer-content' }
];

sections.forEach(section => {
    const element = document.querySelector(section.selector);
    if (element) {
        const styles = window.getComputedStyle(element);
        const maxWidth = styles.maxWidth;
        const actualWidth = element.offsetWidth;
        
        console.log(`   ${section.name}:`);
        console.log(`      Max-width: ${maxWidth}`);
        console.log(`      Actual width: ${actualWidth}px`);
        console.log(`      Margin: ${styles.margin}`);
        
        if (maxWidth === 'none' || parseFloat(maxWidth) === 0) {
            console.error(`      ‚ùå –ü–†–û–ë–õ–ï–ú–ê: max-width –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`);
        } else {
            const maxW = parseFloat(maxWidth);
            if (actualWidth > maxW) {
                console.error(`      ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ø—Ä–µ–≤—ã—à–∞–µ—Ç max-width –Ω–∞ ${actualWidth - maxW}px`);
            } else {
                console.log(`      ‚úÖ OK`);
            }
        }
    } else {
        console.warn(`   ${section.name}: —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (${section.selector})`);
    }
});
console.log('');

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å—Ç–∏–ª–µ–π
console.log('üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–õ–ò–ö–¢–û–í –°–¢–ò–õ–ï–ô:');
if (servicesGrid) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ CSS –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const rules = [];
    for (let sheet of document.styleSheets) {
        try {
            for (let rule of sheet.cssRules || sheet.rules || []) {
                if (rule.selectorText && servicesGrid.matches(rule.selectorText)) {
                    rules.push({
                        selector: rule.selectorText,
                        maxWidth: rule.style.maxWidth || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                        source: sheet.href || 'inline'
                    });
                }
            }
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ CORS
        }
    }
    
    console.log('   –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è .services-grid-3d:');
    rules.forEach((rule, index) => {
        console.log(`   ${index + 1}. ${rule.selector}`);
        console.log(`      Max-width: ${rule.maxWidth}`);
        console.log(`      –ò—Å—Ç–æ—á–Ω–∏–∫: ${rule.source}`);
    });
}
console.log('');

// 6. –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

if (servicesGrid) {
    const styles = window.getComputedStyle(servicesGrid);
    const maxWidth = parseFloat(styles.maxWidth);
    const actualWidth = servicesGrid.offsetWidth;
    
    if (isNaN(maxWidth) || maxWidth === 0) {
        console.error('‚ùå –ü–†–û–ë–õ–ï–ú–ê: max-width –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è!');
        console.log('   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CSS —Ñ–∞–π–ª—ã, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∏–ª–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è');
    } else if (actualWidth > maxWidth) {
        console.error(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è!`);
        console.log(`   Max-width: ${maxWidth}px`);
        console.log(`   Actual width: ${actualWidth}px`);
        console.log(`   –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: ${actualWidth - maxWidth}px`);
        console.log('   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ !important');
    } else {
        console.log('‚úÖ –í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
        console.log(`   Max-width: ${maxWidth}px`);
        console.log(`   Actual width: ${actualWidth}px`);
    }
}

console.log('\nüí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞—ë—Ç—Å—è, —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω—Å–æ–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É');

